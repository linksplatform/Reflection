{
  "api/Platform.Reflection.AssemblyExtensions.html": {
    "href": "api/Platform.Reflection.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class AssemblyExtensions Represents the assembly extensions. Inheritance Object AssemblyExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class AssemblyExtensions Methods | Improve this Doc View Source GetCachedLoadableTypes(Assembly) Gets the cached loadable types using the specified assembly. Declaration public static Type[] GetCachedLoadableTypes(this Assembly assembly) Parameters Type Name Description Assembly assembly The assembly. Returns Type Description Type [] The type array | Improve this Doc View Source GetLoadableTypes(Assembly) Declaration public static Type[] GetLoadableTypes(this Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Type [] Remarks Source: http://haacked.com/archive/2012/07/23/get-all-types-in-an-assembly.aspx/"
  },
  "api/Platform.Reflection.DelegateHelpers.html": {
    "href": "api/Platform.Reflection.DelegateHelpers.html",
    "title": "Class DelegateHelpers | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class DelegateHelpers Represents the delegate helpers. Inheritance Object DelegateHelpers Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class DelegateHelpers Methods | Improve this Doc View Source Compile<TDelegate>(Action<ILGenerator>) Compiles the emit code. Declaration public static TDelegate Compile<TDelegate>(Action<ILGenerator> emitCode) where TDelegate : Delegate Parameters Type Name Description Action < ILGenerator > emitCode The emit code. Returns Type Description TDelegate The delegate Type Parameters Name Description TDelegate The delegate. | Improve this Doc View Source Compile<TDelegate>(Action<ILGenerator>, Boolean) Compiles the emit code. Declaration public static TDelegate Compile<TDelegate>(Action<ILGenerator> emitCode, bool typeMemberMethod) where TDelegate : Delegate Parameters Type Name Description Action < ILGenerator > emitCode The emit code. Boolean typeMemberMethod The type member method. Returns Type Description TDelegate The delegate. Type Parameters Name Description TDelegate The delegate. | Improve this Doc View Source CompileDynamicMethod<TDelegate>(Action<ILGenerator>) Compiles the dynamic method using the specified emit code. Declaration public static TDelegate CompileDynamicMethod<TDelegate>(Action<ILGenerator> emitCode) Parameters Type Name Description Action < ILGenerator > emitCode The emit code. Returns Type Description TDelegate The delegate Type Parameters Name Description TDelegate The delegate. | Improve this Doc View Source CompileOrDefault<TDelegate>(Action<ILGenerator>) Compiles the or default using the specified emit code. Declaration public static TDelegate CompileOrDefault<TDelegate>(Action<ILGenerator> emitCode) where TDelegate : Delegate Parameters Type Name Description Action < ILGenerator > emitCode The emit code. Returns Type Description TDelegate The delegate Type Parameters Name Description TDelegate The delegate. | Improve this Doc View Source CompileOrDefault<TDelegate>(Action<ILGenerator>, Boolean) Compiles the or default using the specified emit code. Declaration public static TDelegate CompileOrDefault<TDelegate>(Action<ILGenerator> emitCode, bool typeMemberMethod) where TDelegate : Delegate Parameters Type Name Description Action < ILGenerator > emitCode The emit code. Boolean typeMemberMethod The type member method. Returns Type Description TDelegate The delegate. Type Parameters Name Description TDelegate The delegate. | Improve this Doc View Source CompileTypeMemberMethod<TDelegate>(Action<ILGenerator>) Compiles the type member method using the specified emit code. Declaration public static TDelegate CompileTypeMemberMethod<TDelegate>(Action<ILGenerator> emitCode) Parameters Type Name Description Action < ILGenerator > emitCode The emit code. Returns Type Description TDelegate The delegate Type Parameters Name Description TDelegate The delegate."
  },
  "api/Platform.Reflection.DynamicExtensions.html": {
    "href": "api/Platform.Reflection.DynamicExtensions.html",
    "title": "Class DynamicExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class DynamicExtensions Represents the dynamic extensions. Inheritance Object DynamicExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class DynamicExtensions Methods | Improve this Doc View Source HasProperty(Object, String) Determines whether has property. Declaration public static bool HasProperty(this object object, string propertyName) Parameters Type Name Description Object object String propertyName The property name. Returns Type Description Boolean The bool"
  },
  "api/Platform.Reflection.EnsureExtensions.html": {
    "href": "api/Platform.Reflection.EnsureExtensions.html",
    "title": "Class EnsureExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class EnsureExtensions Represents the ensure extensions. Inheritance Object EnsureExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class EnsureExtensions Methods | Improve this Doc View Source CanBeNumeric<T>(EnsureAlwaysExtensionRoot) Cans the be numeric using the specified root. Declaration public static void CanBeNumeric<T>(this EnsureAlwaysExtensionRoot root) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source CanBeNumeric<T>(EnsureAlwaysExtensionRoot, Func<String>) Cans the be numeric using the specified root. Declaration public static void CanBeNumeric<T>(this EnsureAlwaysExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . Exceptions Type Condition NotSupportedException | Improve this Doc View Source CanBeNumeric<T>(EnsureAlwaysExtensionRoot, String) Cans the be numeric using the specified root. Declaration public static void CanBeNumeric<T>(this EnsureAlwaysExtensionRoot root, string message) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source CanBeNumeric<T>(EnsureOnDebugExtensionRoot) Cans the be numeric using the specified root. Declaration [Conditional(\"DEBUG\")] public static void CanBeNumeric<T>(this EnsureOnDebugExtensionRoot root) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source CanBeNumeric<T>(EnsureOnDebugExtensionRoot, Func<String>) Cans the be numeric using the specified root. Declaration [Conditional(\"DEBUG\")] public static void CanBeNumeric<T>(this EnsureOnDebugExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . | Improve this Doc View Source CanBeNumeric<T>(EnsureOnDebugExtensionRoot, String) Cans the be numeric using the specified root. Declaration [Conditional(\"DEBUG\")] public static void CanBeNumeric<T>(this EnsureOnDebugExtensionRoot root, string message) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsNumeric<T>(EnsureAlwaysExtensionRoot) Ises the numeric using the specified root. Declaration public static void IsNumeric<T>(this EnsureAlwaysExtensionRoot root) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsNumeric<T>(EnsureAlwaysExtensionRoot, Func<String>) Ises the numeric using the specified root. Declaration public static void IsNumeric<T>(this EnsureAlwaysExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . Exceptions Type Condition NotSupportedException | Improve this Doc View Source IsNumeric<T>(EnsureAlwaysExtensionRoot, String) Ises the numeric using the specified root. Declaration public static void IsNumeric<T>(this EnsureAlwaysExtensionRoot root, string message) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsNumeric<T>(EnsureOnDebugExtensionRoot) Ises the numeric using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsNumeric<T>(this EnsureOnDebugExtensionRoot root) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsNumeric<T>(EnsureOnDebugExtensionRoot, Func<String>) Ises the numeric using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsNumeric<T>(this EnsureOnDebugExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . | Improve this Doc View Source IsNumeric<T>(EnsureOnDebugExtensionRoot, String) Ises the numeric using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsNumeric<T>(this EnsureOnDebugExtensionRoot root, string message) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsSigned<T>(EnsureAlwaysExtensionRoot) Ises the signed using the specified root. Declaration public static void IsSigned<T>(this EnsureAlwaysExtensionRoot root) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsSigned<T>(EnsureAlwaysExtensionRoot, Func<String>) Ises the signed using the specified root. Declaration public static void IsSigned<T>(this EnsureAlwaysExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . Exceptions Type Condition NotSupportedException | Improve this Doc View Source IsSigned<T>(EnsureAlwaysExtensionRoot, String) Ises the signed using the specified root. Declaration public static void IsSigned<T>(this EnsureAlwaysExtensionRoot root, string message) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsSigned<T>(EnsureOnDebugExtensionRoot) Ises the signed using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsSigned<T>(this EnsureOnDebugExtensionRoot root) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsSigned<T>(EnsureOnDebugExtensionRoot, Func<String>) Ises the signed using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsSigned<T>(this EnsureOnDebugExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . | Improve this Doc View Source IsSigned<T>(EnsureOnDebugExtensionRoot, String) Ises the signed using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsSigned<T>(this EnsureOnDebugExtensionRoot root, string message) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsSignedInteger<T>(EnsureAlwaysExtensionRoot) Ises the signed integer using the specified root. Declaration public static void IsSignedInteger<T>(this EnsureAlwaysExtensionRoot root) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsSignedInteger<T>(EnsureAlwaysExtensionRoot, Func<String>) Ises the signed integer using the specified root. Declaration public static void IsSignedInteger<T>(this EnsureAlwaysExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . Exceptions Type Condition NotSupportedException | Improve this Doc View Source IsSignedInteger<T>(EnsureAlwaysExtensionRoot, String) Ises the signed integer using the specified root. Declaration public static void IsSignedInteger<T>(this EnsureAlwaysExtensionRoot root, string message) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsSignedInteger<T>(EnsureOnDebugExtensionRoot) Ises the signed integer using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsSignedInteger<T>(this EnsureOnDebugExtensionRoot root) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsSignedInteger<T>(EnsureOnDebugExtensionRoot, Func<String>) Ises the signed integer using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsSignedInteger<T>(this EnsureOnDebugExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . | Improve this Doc View Source IsSignedInteger<T>(EnsureOnDebugExtensionRoot, String) Ises the signed integer using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsSignedInteger<T>(this EnsureOnDebugExtensionRoot root, string message) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsUnsignedInteger<T>(EnsureAlwaysExtensionRoot) Ises the unsigned integer using the specified root. Declaration public static void IsUnsignedInteger<T>(this EnsureAlwaysExtensionRoot root) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsUnsignedInteger<T>(EnsureAlwaysExtensionRoot, Func<String>) Ises the unsigned integer using the specified root. Declaration public static void IsUnsignedInteger<T>(this EnsureAlwaysExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . Exceptions Type Condition NotSupportedException | Improve this Doc View Source IsUnsignedInteger<T>(EnsureAlwaysExtensionRoot, String) Ises the unsigned integer using the specified root. Declaration public static void IsUnsignedInteger<T>(this EnsureAlwaysExtensionRoot root, string message) Parameters Type Name Description EnsureAlwaysExtensionRoot root The root. String message The message. Type Parameters Name Description T The . | Improve this Doc View Source IsUnsignedInteger<T>(EnsureOnDebugExtensionRoot) Ises the unsigned integer using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsUnsignedInteger<T>(this EnsureOnDebugExtensionRoot root) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Type Parameters Name Description T The . | Improve this Doc View Source IsUnsignedInteger<T>(EnsureOnDebugExtensionRoot, Func<String>) Ises the unsigned integer using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsUnsignedInteger<T>(this EnsureOnDebugExtensionRoot root, Func<string> messageBuilder) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. Func < String > messageBuilder The message builder. Type Parameters Name Description T The . | Improve this Doc View Source IsUnsignedInteger<T>(EnsureOnDebugExtensionRoot, String) Ises the unsigned integer using the specified root. Declaration [Conditional(\"DEBUG\")] public static void IsUnsignedInteger<T>(this EnsureOnDebugExtensionRoot root, string message) Parameters Type Name Description EnsureOnDebugExtensionRoot root The root. String message The message. Type Parameters Name Description T The ."
  },
  "api/Platform.Reflection.FieldInfoExtensions.html": {
    "href": "api/Platform.Reflection.FieldInfoExtensions.html",
    "title": "Class FieldInfoExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class FieldInfoExtensions Represents the field info extensions. Inheritance Object FieldInfoExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class FieldInfoExtensions Methods | Improve this Doc View Source GetStaticValue<T>(FieldInfo) Gets the static value using the specified field info. Declaration public static T GetStaticValue<T>(this FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The field info. Returns Type Description T The Type Parameters Name Description T The ."
  },
  "api/Platform.Reflection.html": {
    "href": "api/Platform.Reflection.html",
    "title": "Namespace Platform.Reflection | LinksPlatform's Platform.Reflection Library",
    "keywords": "Namespace Platform.Reflection Classes AssemblyExtensions Represents the assembly extensions. DelegateHelpers Represents the delegate helpers. DynamicExtensions Represents the dynamic extensions. EnsureExtensions Represents the ensure extensions. FieldInfoExtensions Represents the field info extensions. ILGeneratorExtensions Represents the il generator extensions. MethodInfoExtensions Represents the method info extensions. NotSupportedExceptionDelegateFactory<TDelegate> Represents the not supported exception delegate factory. NumericType<T> Represents the numeric type. PropertyInfoExtensions Represents the property info extensions. TypeBuilderExtensions Represents the type builder extensions. TypeExtensions Represents the type extensions. Types Represents the types. Types<T> Represents the types. Types<T1, T2> Represents the types. Types<T1, T2, T3> Represents the types. Types<T1, T2, T3, T4> Represents the types. Types<T1, T2, T3, T4, T5> Represents the types. Types<T1, T2, T3, T4, T5, T6> Represents the types. Types<T1, T2, T3, T4, T5, T6, T7> Represents the types."
  },
  "api/Platform.Reflection.ILGeneratorExtensions.html": {
    "href": "api/Platform.Reflection.ILGeneratorExtensions.html",
    "title": "Class ILGeneratorExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class ILGeneratorExtensions Represents the il generator extensions. Inheritance Object ILGeneratorExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class ILGeneratorExtensions Methods | Improve this Doc View Source Add(ILGenerator) Adds the generator. Declaration public static void Add(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source And(ILGenerator) Ands the generator. Declaration public static void And(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source Box(ILGenerator, Type) Boxes the generator. Declaration public static void Box(this ILGenerator generator, Type boxedType) Parameters Type Name Description ILGenerator generator The generator. Type boxedType The boxed type. | Improve this Doc View Source Box<TBox>(ILGenerator) Boxes the generator. Declaration public static void Box<TBox>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TBox The box. | Improve this Doc View Source BranchIfGreaterOrEqual(ILGenerator, Label) Branches the if greater or equal using the specified generator. Declaration public static void BranchIfGreaterOrEqual(this ILGenerator generator, Label label) Parameters Type Name Description ILGenerator generator The generator. Label label The label. | Improve this Doc View Source BranchIfGreaterOrEqual(ILGenerator, Boolean, Label) Branches the if greater or equal using the specified generator. Declaration public static void BranchIfGreaterOrEqual(this ILGenerator generator, bool isSigned, Label label) Parameters Type Name Description ILGenerator generator The generator. Boolean isSigned The is signed. Label label The label. | Improve this Doc View Source BranchIfLessOrEqual(ILGenerator, Label) Branches the if less or equal using the specified generator. Declaration public static void BranchIfLessOrEqual(this ILGenerator generator, Label label) Parameters Type Name Description ILGenerator generator The generator. Label label The label. | Improve this Doc View Source BranchIfLessOrEqual(ILGenerator, Boolean, Label) Branches the if less or equal using the specified generator. Declaration public static void BranchIfLessOrEqual(this ILGenerator generator, bool isSigned, Label label) Parameters Type Name Description ILGenerator generator The generator. Boolean isSigned The is signed. Label label The label. | Improve this Doc View Source Call(ILGenerator, MethodInfo) Calls the generator. Declaration public static void Call(this ILGenerator generator, MethodInfo method) Parameters Type Name Description ILGenerator generator The generator. MethodInfo method The method. | Improve this Doc View Source CheckedConvert<TSource, TTarget>(ILGenerator) Checkeds the convert using the specified generator. Declaration public static void CheckedConvert<TSource, TTarget>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TSource The source. TTarget The target. Exceptions Type Condition NotSupportedException | Improve this Doc View Source CheckedMultiply<T>(ILGenerator) Checkeds the multiply using the specified generator. Declaration public static void CheckedMultiply<T>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description T The . | Improve this Doc View Source CompareGreaterThan(ILGenerator) Compares the greater than using the specified generator. Declaration public static void CompareGreaterThan(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source CompareGreaterThan(ILGenerator, Boolean) Compares the greater than using the specified generator. Declaration public static void CompareGreaterThan(this ILGenerator generator, bool isSigned) Parameters Type Name Description ILGenerator generator The generator. Boolean isSigned The is signed. | Improve this Doc View Source CompareLessThan(ILGenerator) Compares the less than using the specified generator. Declaration public static void CompareLessThan(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source CompareLessThan(ILGenerator, Boolean) Compares the less than using the specified generator. Declaration public static void CompareLessThan(this ILGenerator generator, bool isSigned) Parameters Type Name Description ILGenerator generator The generator. Boolean isSigned The is signed. | Improve this Doc View Source DeclareLocal<T>(ILGenerator) Declares the local using the specified generator. Declaration public static LocalBuilder DeclareLocal<T>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Returns Type Description LocalBuilder The local builder Type Parameters Name Description T The . | Improve this Doc View Source Decrement(ILGenerator, Type) Decrements the generator. Declaration public static void Decrement(this ILGenerator generator, Type valueType) Parameters Type Name Description ILGenerator generator The generator. Type valueType The value type. | Improve this Doc View Source Decrement<TValue>(ILGenerator) Decrements the generator. Declaration public static void Decrement<TValue>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TValue The value. | Improve this Doc View Source Divide<T>(ILGenerator) Divides the generator. Declaration public static void Divide<T>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description T The . | Improve this Doc View Source Increment(ILGenerator, Type) Increments the generator. Declaration public static void Increment(this ILGenerator generator, Type valueType) Parameters Type Name Description ILGenerator generator The generator. Type valueType The value type. | Improve this Doc View Source Increment<TValue>(ILGenerator) Increments the generator. Declaration public static void Increment<TValue>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TValue The value. | Improve this Doc View Source LoadArgument(ILGenerator, Int32) Loads the argument using the specified generator. Declaration public static void LoadArgument(this ILGenerator generator, int argumentIndex) Parameters Type Name Description ILGenerator generator The generator. Int32 argumentIndex The argument index. | Improve this Doc View Source LoadArguments(ILGenerator, Int32[]) Loads the arguments using the specified generator. Declaration public static void LoadArguments(this ILGenerator generator, params int[] argumentIndices) Parameters Type Name Description ILGenerator generator The generator. Int32 [] argumentIndices The argument indices. | Improve this Doc View Source LoadConstant(ILGenerator, Boolean) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, bool value) Parameters Type Name Description ILGenerator generator The generator. Boolean value The value. | Improve this Doc View Source LoadConstant(ILGenerator, Byte) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, byte value) Parameters Type Name Description ILGenerator generator The generator. Byte value The value. | Improve this Doc View Source LoadConstant(ILGenerator, Double) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, double value) Parameters Type Name Description ILGenerator generator The generator. Double value The value. | Improve this Doc View Source LoadConstant(ILGenerator, Int16) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, short value) Parameters Type Name Description ILGenerator generator The generator. Int16 value The value. | Improve this Doc View Source LoadConstant(ILGenerator, Int32) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, int value) Parameters Type Name Description ILGenerator generator The generator. Int32 value The value. | Improve this Doc View Source LoadConstant(ILGenerator, Int64) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, long value) Parameters Type Name Description ILGenerator generator The generator. Int64 value The value. | Improve this Doc View Source LoadConstant(ILGenerator, SByte) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, sbyte value) Parameters Type Name Description ILGenerator generator The generator. SByte value The value. | Improve this Doc View Source LoadConstant(ILGenerator, Single) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, float value) Parameters Type Name Description ILGenerator generator The generator. Single value The value. | Improve this Doc View Source LoadConstant(ILGenerator, Type, Object) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, Type constantType, object constantValue) Parameters Type Name Description ILGenerator generator The generator. Type constantType The constant type. Object constantValue The constant value. Exceptions Type Condition NotSupportedException | Improve this Doc View Source LoadConstant(ILGenerator, UInt16) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, ushort value) Parameters Type Name Description ILGenerator generator The generator. UInt16 value The value. | Improve this Doc View Source LoadConstant(ILGenerator, UInt32) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, uint value) Parameters Type Name Description ILGenerator generator The generator. UInt32 value The value. | Improve this Doc View Source LoadConstant(ILGenerator, UInt64) Loads the constant using the specified generator. Declaration public static void LoadConstant(this ILGenerator generator, ulong value) Parameters Type Name Description ILGenerator generator The generator. UInt64 value The value. | Improve this Doc View Source LoadConstant<TConstant>(ILGenerator, TConstant) Loads the constant using the specified generator. Declaration public static void LoadConstant<TConstant>(this ILGenerator generator, TConstant constantValue) Parameters Type Name Description ILGenerator generator The generator. TConstant constantValue The constant value. Type Parameters Name Description TConstant The constant. | Improve this Doc View Source LoadConstantOne(ILGenerator, Type) Loads the constant one using the specified generator. Declaration public static void LoadConstantOne(this ILGenerator generator, Type constantType) Parameters Type Name Description ILGenerator generator The generator. Type constantType The constant type. Exceptions Type Condition NotSupportedException | Improve this Doc View Source LoadConstantOne<TConstant>(ILGenerator) Loads the constant one using the specified generator. Declaration public static void LoadConstantOne<TConstant>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TConstant The constant. | Improve this Doc View Source LoadIndirect(ILGenerator, Type, Boolean, Nullable<Byte>) Loads the indirect using the specified generator. Declaration public static void LoadIndirect(this ILGenerator generator, Type type, bool isVolatile = false, byte? unaligned = default(byte? )) Parameters Type Name Description ILGenerator generator The generator. Type type The type. Boolean isVolatile The is volatile. Nullable < Byte > unaligned The unaligned. Exceptions Type Condition InvalidOperationException ArgumentException unaligned must be null, 1, 2, or 4 | Improve this Doc View Source LoadIndirect<T>(ILGenerator, Boolean, Nullable<Byte>) Loads the indirect using the specified generator. Declaration public static void LoadIndirect<T>(this ILGenerator generator, bool isVolatile = false, byte? unaligned = default(byte? )) Parameters Type Name Description ILGenerator generator The generator. Boolean isVolatile The is volatile. Nullable < Byte > unaligned The unaligned. Type Parameters Name Description T The . | Improve this Doc View Source LoadLocal(ILGenerator, LocalBuilder) Loads the local using the specified generator. Declaration public static void LoadLocal(this ILGenerator generator, LocalBuilder local) Parameters Type Name Description ILGenerator generator The generator. LocalBuilder local The local. | Improve this Doc View Source Multiply(ILGenerator) Multiplies the generator. Declaration public static void Multiply(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source Negate(ILGenerator) Negates the generator. Declaration public static void Negate(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source NewObject(ILGenerator, ConstructorInfo) News the object using the specified generator. Declaration public static void NewObject(this ILGenerator generator, ConstructorInfo constructor) Parameters Type Name Description ILGenerator generator The generator. ConstructorInfo constructor The constructor. | Improve this Doc View Source NewObject(ILGenerator, Type, Type[]) News the object using the specified generator. Declaration public static void NewObject(this ILGenerator generator, Type type, params Type[] parameterTypes) Parameters Type Name Description ILGenerator generator The generator. Type type The type. Type [] parameterTypes The parameter types. Exceptions Type Condition InvalidOperationException | Improve this Doc View Source Not(ILGenerator) Nots the generator. Declaration public static void Not(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source Or(ILGenerator) Ors the generator. Declaration public static void Or(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source Return(ILGenerator) Returns the generator. Declaration public static void Return(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source ShiftLeft(ILGenerator) Shifts the left using the specified generator. Declaration public static void ShiftLeft(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source ShiftRight<T>(ILGenerator) Shifts the right using the specified generator. Declaration public static void ShiftRight<T>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description T The . | Improve this Doc View Source StoreArgument(ILGenerator, Int32) Stores the argument using the specified generator. Declaration public static void StoreArgument(this ILGenerator generator, int argumentIndex) Parameters Type Name Description ILGenerator generator The generator. Int32 argumentIndex The argument index. | Improve this Doc View Source StoreIndirect(ILGenerator, Type, Boolean, Nullable<Byte>) Stores the indirect using the specified generator. Declaration public static void StoreIndirect(this ILGenerator generator, Type type, bool isVolatile = false, byte? unaligned = default(byte? )) Parameters Type Name Description ILGenerator generator The generator. Type type The type. Boolean isVolatile The is volatile. Nullable < Byte > unaligned The unaligned. Exceptions Type Condition InvalidOperationException ArgumentException unaligned must be null, 1, 2, or 4 | Improve this Doc View Source StoreIndirect<T>(ILGenerator, Boolean, Nullable<Byte>) Stores the indirect using the specified generator. Declaration public static void StoreIndirect<T>(this ILGenerator generator, bool isVolatile = false, byte? unaligned = default(byte? )) Parameters Type Name Description ILGenerator generator The generator. Boolean isVolatile The is volatile. Nullable < Byte > unaligned The unaligned. Type Parameters Name Description T The . | Improve this Doc View Source StoreLocal(ILGenerator, LocalBuilder) Stores the local using the specified generator. Declaration public static void StoreLocal(this ILGenerator generator, LocalBuilder local) Parameters Type Name Description ILGenerator generator The generator. LocalBuilder local The local. | Improve this Doc View Source Subtract(ILGenerator) Subtracts the generator. Declaration public static void Subtract(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source Throw<T>(ILGenerator) Throws the generator. Declaration public static void Throw<T>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description T The . | Improve this Doc View Source Unbox(ILGenerator, Type) Unboxes the generator. Declaration public static void Unbox(this ILGenerator generator, Type typeToUnbox) Parameters Type Name Description ILGenerator generator The generator. Type typeToUnbox The type to unbox. | Improve this Doc View Source Unbox<TUnbox>(ILGenerator) Unboxes the generator. Declaration public static void Unbox<TUnbox>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TUnbox The unbox. | Improve this Doc View Source UnboxValue(ILGenerator, Type) Unboxes the value using the specified generator. Declaration public static void UnboxValue(this ILGenerator generator, Type typeToUnbox) Parameters Type Name Description ILGenerator generator The generator. Type typeToUnbox The type to unbox. | Improve this Doc View Source UnboxValue<TUnbox>(ILGenerator) Unboxes the value using the specified generator. Declaration public static void UnboxValue<TUnbox>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TUnbox The unbox. | Improve this Doc View Source UncheckedConvert<TSource, TTarget>(ILGenerator) Uncheckeds the convert using the specified generator. Declaration public static void UncheckedConvert<TSource, TTarget>(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. Type Parameters Name Description TSource The source. TTarget The target. | Improve this Doc View Source UncheckedConvert<TSource, TTarget>(ILGenerator, Boolean) Uncheckeds the convert using the specified generator. Declaration public static void UncheckedConvert<TSource, TTarget>(this ILGenerator generator, bool extendSign) Parameters Type Name Description ILGenerator generator The generator. Boolean extendSign The extend sign. Type Parameters Name Description TSource The source. TTarget The target. | Improve this Doc View Source UnsignedBranchIfGreaterOrEqual(ILGenerator, Label) Unsigneds the branch if greater or equal using the specified generator. Declaration public static void UnsignedBranchIfGreaterOrEqual(this ILGenerator generator, Label label) Parameters Type Name Description ILGenerator generator The generator. Label label The label. | Improve this Doc View Source UnsignedBranchIfLessOrEqual(ILGenerator, Label) Unsigneds the branch if less or equal using the specified generator. Declaration public static void UnsignedBranchIfLessOrEqual(this ILGenerator generator, Label label) Parameters Type Name Description ILGenerator generator The generator. Label label The label. | Improve this Doc View Source UnsignedCompareGreaterThan(ILGenerator) Unsigneds the compare greater than using the specified generator. Declaration public static void UnsignedCompareGreaterThan(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator. | Improve this Doc View Source UnsignedCompareLessThan(ILGenerator) Unsigneds the compare less than using the specified generator. Declaration public static void UnsignedCompareLessThan(this ILGenerator generator) Parameters Type Name Description ILGenerator generator The generator."
  },
  "api/Platform.Reflection.MethodInfoExtensions.html": {
    "href": "api/Platform.Reflection.MethodInfoExtensions.html",
    "title": "Class MethodInfoExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class MethodInfoExtensions Represents the method info extensions. Inheritance Object MethodInfoExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class MethodInfoExtensions Methods | Improve this Doc View Source GetILBytes(MethodInfo) Gets the il bytes using the specified method info. Declaration public static byte[] GetILBytes(this MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info. Returns Type Description Byte [] The byte array | Improve this Doc View Source GetParameterTypes(MethodInfo) Gets the parameter types using the specified method info. Declaration public static Type[] GetParameterTypes(this MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info. Returns Type Description Type [] The type array"
  },
  "api/Platform.Reflection.NotSupportedExceptionDelegateFactory-1.html": {
    "href": "api/Platform.Reflection.NotSupportedExceptionDelegateFactory-1.html",
    "title": "Class NotSupportedExceptionDelegateFactory<TDelegate> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class NotSupportedExceptionDelegateFactory<TDelegate> Represents the not supported exception delegate factory. Inheritance Object NotSupportedExceptionDelegateFactory<TDelegate> Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class NotSupportedExceptionDelegateFactory<TDelegate> : IFactory<TDelegate> where TDelegate : Delegate Type Parameters Name Description TDelegate Methods | Improve this Doc View Source Create() Creates this instance. Declaration public TDelegate Create() Returns Type Description TDelegate The delegate. Exceptions Type Condition InvalidOperationException Unable to compile stub delegate. Extension Methods DynamicExtensions.HasProperty(Object, String)"
  },
  "api/Platform.Reflection.NumericType-1.html": {
    "href": "api/Platform.Reflection.NumericType-1.html",
    "title": "Class NumericType<T> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class NumericType<T> Represents the numeric type. Inheritance Object NumericType<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class NumericType<T> Type Parameters Name Description T Fields | Improve this Doc View Source BitsSize The bits size. Declaration public static readonly int BitsSize Field Value Type Description Int32 | Improve this Doc View Source BytesSize The bytes size. Declaration public static readonly int BytesSize Field Value Type Description Int32 | Improve this Doc View Source CanBeNumeric The can be numeric. Declaration public static readonly bool CanBeNumeric Field Value Type Description Boolean | Improve this Doc View Source IsFloatPoint The is float point. Declaration public static readonly bool IsFloatPoint Field Value Type Description Boolean | Improve this Doc View Source IsNullable The is nullable. Declaration public static readonly bool IsNullable Field Value Type Description Boolean | Improve this Doc View Source IsNumeric The is numeric. Declaration public static readonly bool IsNumeric Field Value Type Description Boolean | Improve this Doc View Source IsSigned The is signed. Declaration public static readonly bool IsSigned Field Value Type Description Boolean | Improve this Doc View Source MaxValue The max value. Declaration public static readonly T MaxValue Field Value Type Description T | Improve this Doc View Source MinValue The min value. Declaration public static readonly T MinValue Field Value Type Description T | Improve this Doc View Source SignedVersion The signed version. Declaration public static readonly Type SignedVersion Field Value Type Description Type | Improve this Doc View Source Type The type. Declaration public static readonly Type Type Field Value Type Description Type | Improve this Doc View Source UnderlyingType The underlying type. Declaration public static readonly Type UnderlyingType Field Value Type Description Type | Improve this Doc View Source UnsignedVersion The unsigned version. Declaration public static readonly Type UnsignedVersion Field Value Type Description Type"
  },
  "api/Platform.Reflection.PropertyInfoExtensions.html": {
    "href": "api/Platform.Reflection.PropertyInfoExtensions.html",
    "title": "Class PropertyInfoExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class PropertyInfoExtensions Represents the property info extensions. Inheritance Object PropertyInfoExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class PropertyInfoExtensions Methods | Improve this Doc View Source GetStaticValue<T>(PropertyInfo) Gets the static value using the specified field info. Declaration public static T GetStaticValue<T>(this PropertyInfo fieldInfo) Parameters Type Name Description PropertyInfo fieldInfo The field info. Returns Type Description T The Type Parameters Name Description T The ."
  },
  "api/Platform.Reflection.TypeBuilderExtensions.html": {
    "href": "api/Platform.Reflection.TypeBuilderExtensions.html",
    "title": "Class TypeBuilderExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class TypeBuilderExtensions Represents the type builder extensions. Inheritance Object TypeBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class TypeBuilderExtensions Fields | Improve this Doc View Source DefaultFinalVirtualMethodAttributes The hide by sig. Declaration public static readonly MethodAttributes DefaultFinalVirtualMethodAttributes Field Value Type Description MethodAttributes | Improve this Doc View Source DefaultMethodImplAttributes The aggressive inlining. Declaration public static readonly MethodImplAttributes DefaultMethodImplAttributes Field Value Type Description MethodImplAttributes | Improve this Doc View Source DefaultStaticMethodAttributes The static. Declaration public static readonly MethodAttributes DefaultStaticMethodAttributes Field Value Type Description MethodAttributes Methods | Improve this Doc View Source EmitFinalVirtualMethod<TDelegate>(TypeBuilder, String, Action<ILGenerator>) Emits the final virtual method using the specified type. Declaration public static void EmitFinalVirtualMethod<TDelegate>(this TypeBuilder type, string methodName, Action<ILGenerator> emitCode) Parameters Type Name Description TypeBuilder type The type. String methodName The method name. Action < ILGenerator > emitCode The emit code. Type Parameters Name Description TDelegate The delegate. | Improve this Doc View Source EmitMethod(TypeBuilder, String, MethodAttributes, MethodImplAttributes, Type, Type[], Action<ILGenerator>) Emits the method using the specified type. Declaration public static void EmitMethod(this TypeBuilder type, string methodName, MethodAttributes methodAttributes, MethodImplAttributes methodImplAttributes, Type returnType, Type[] parameterTypes, Action<ILGenerator> emitCode) Parameters Type Name Description TypeBuilder type The type. String methodName The method name. MethodAttributes methodAttributes The method attributes. MethodImplAttributes methodImplAttributes The method impl attributes. Type returnType The return type. Type [] parameterTypes The parameter types. Action < ILGenerator > emitCode The emit code. | Improve this Doc View Source EmitMethod<TDelegate>(TypeBuilder, String, MethodAttributes, MethodImplAttributes, Action<ILGenerator>) Emits the method using the specified type. Declaration public static void EmitMethod<TDelegate>(this TypeBuilder type, string methodName, MethodAttributes methodAttributes, MethodImplAttributes methodImplAttributes, Action<ILGenerator> emitCode) Parameters Type Name Description TypeBuilder type The type. String methodName The method name. MethodAttributes methodAttributes The method attributes. MethodImplAttributes methodImplAttributes The method impl attributes. Action < ILGenerator > emitCode The emit code. Type Parameters Name Description TDelegate The delegate. | Improve this Doc View Source EmitStaticMethod<TDelegate>(TypeBuilder, String, Action<ILGenerator>) Emits the static method using the specified type. Declaration public static void EmitStaticMethod<TDelegate>(this TypeBuilder type, string methodName, Action<ILGenerator> emitCode) Parameters Type Name Description TypeBuilder type The type. String methodName The method name. Action < ILGenerator > emitCode The emit code. Type Parameters Name Description TDelegate The delegate."
  },
  "api/Platform.Reflection.TypeExtensions.html": {
    "href": "api/Platform.Reflection.TypeExtensions.html",
    "title": "Class TypeExtensions | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class TypeExtensions Represents the type extensions. Inheritance Object TypeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public static class TypeExtensions Fields | Improve this Doc View Source DefaultDelegateMethodName The default delegate method name. Declaration public static readonly string DefaultDelegateMethodName Field Value Type Description String | Improve this Doc View Source StaticMemberBindingFlags The static. Declaration public static readonly BindingFlags StaticMemberBindingFlags Field Value Type Description BindingFlags Methods | Improve this Doc View Source CanBeNumeric(Type) Determines whether can be numeric. Declaration public static bool CanBeNumeric(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Boolean The bool | Improve this Doc View Source GetAssembly(Type) Gets the assembly using the specified type. Declaration public static Assembly GetAssembly(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Assembly The assembly | Improve this Doc View Source GetBaseType(Type) Gets the base type using the specified type. Declaration public static Type GetBaseType(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Type The type | Improve this Doc View Source GetDelegateCharacteristics(Type, out Type, out Type[]) Gets the delegate characteristics using the specified delegate type. Declaration public static void GetDelegateCharacteristics(this Type delegateType, out Type returnType, out Type[] parameterTypes) Parameters Type Name Description Type delegateType The delegate type. Type returnType The return type. Type [] parameterTypes The parameter types. | Improve this Doc View Source GetDelegateParameterTypes(Type) Gets the delegate parameter types using the specified delegate type. Declaration public static Type[] GetDelegateParameterTypes(this Type delegateType) Parameters Type Name Description Type delegateType The delegate type. Returns Type Description Type [] The type array | Improve this Doc View Source GetDelegateReturnType(Type) Gets the delegate return type using the specified delegate type. Declaration public static Type GetDelegateReturnType(this Type delegateType) Parameters Type Name Description Type delegateType The delegate type. Returns Type Description Type The type | Improve this Doc View Source GetFirstField(Type) Gets the first field using the specified type. Declaration public static FieldInfo GetFirstField(this Type type) Parameters Type Name Description Type type The type. Returns Type Description FieldInfo The field info | Improve this Doc View Source GetGenericMethod(Type, String, Type[], Type[]) Gets the generic method using the specified type. Declaration public static MethodInfo GetGenericMethod(this Type type, string name, Type[] genericParameterTypes, Type[] argumentTypes) Parameters Type Name Description Type type The type. String name The name. Type [] genericParameterTypes The generic parameter types. Type [] argumentTypes The argument types. Returns Type Description MethodInfo The method. | Improve this Doc View Source GetSignedVersionOrNull(Type) Gets the signed version or null using the specified unsigned type. Declaration public static Type GetSignedVersionOrNull(this Type unsignedType) Parameters Type Name Description Type unsignedType The unsigned type. Returns Type Description Type The type | Improve this Doc View Source GetStaticFieldValue<T>(Type, String) Gets the static field value using the specified type. Declaration public static T GetStaticFieldValue<T>(this Type type, string name) Parameters Type Name Description Type type The type. String name The name. Returns Type Description T The Type Parameters Name Description T The . | Improve this Doc View Source GetStaticPropertyValue<T>(Type, String) Gets the static property value using the specified type. Declaration public static T GetStaticPropertyValue<T>(this Type type, string name) Parameters Type Name Description Type type The type. String name The name. Returns Type Description T The Type Parameters Name Description T The . | Improve this Doc View Source GetUnsignedVersionOrNull(Type) Gets the unsigned version or null using the specified signed type. Declaration public static Type GetUnsignedVersionOrNull(this Type signedType) Parameters Type Name Description Type signedType The signed type. Returns Type Description Type The type | Improve this Doc View Source IsFloatPoint(Type) Determines whether is float point. Declaration public static bool IsFloatPoint(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Boolean The bool | Improve this Doc View Source IsGeneric(Type) Determines whether is generic. Declaration public static bool IsGeneric(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Boolean The bool | Improve this Doc View Source IsGeneric(Type, Type) Determines whether is generic. Declaration public static bool IsGeneric(this Type type, Type genericTypeDefinition) Parameters Type Name Description Type type The type. Type genericTypeDefinition The generic type definition. Returns Type Description Boolean The bool | Improve this Doc View Source IsNullable(Type) Determines whether is nullable. Declaration public static bool IsNullable(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Boolean The bool | Improve this Doc View Source IsNumeric(Type) Determines whether is numeric. Declaration public static bool IsNumeric(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Boolean The bool | Improve this Doc View Source IsSigned(Type) Determines whether is signed. Declaration public static bool IsSigned(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Boolean The bool | Improve this Doc View Source IsSubclassOf(Type, Type) Determines whether is subclass of. Declaration public static bool IsSubclassOf(this Type type, Type superClass) Parameters Type Name Description Type type The type. Type superClass The super. Returns Type Description Boolean The bool | Improve this Doc View Source IsValueType(Type) Determines whether is value type. Declaration public static bool IsValueType(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Boolean The bool"
  },
  "api/Platform.Reflection.Types.html": {
    "href": "api/Platform.Reflection.Types.html",
    "title": "Class Types | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types Represents the types. Inheritance Object Types Types<T> Types<T1, T2> Types<T1, T2, T3> Types<T1, T2, T3, T4> Types<T1, T2, T3, T4, T5> Types<T1, T2, T3, T4, T5, T6> Types<T1, T2, T3, T4, T5, T6, T7> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public abstract class Types Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Methods | Improve this Doc View Source ToReadOnlyCollection() Returns the read only collection. Declaration protected ReadOnlyCollection<Type> ToReadOnlyCollection() Returns Type Description ReadOnlyCollection < Type > A read only collection of type Extension Methods DynamicExtensions.HasProperty(Object, String)"
  },
  "api/Platform.Reflection.Types-1.html": {
    "href": "api/Platform.Reflection.Types-1.html",
    "title": "Class Types<T> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types<T> Represents the types. Inheritance Object Types Types<T> Inherited Members Types.ToReadOnlyCollection() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class Types<T> : Types Type Parameters Name Description T Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Extension Methods DynamicExtensions.HasProperty(Object, String) See Also Types"
  },
  "api/Platform.Reflection.Types-2.html": {
    "href": "api/Platform.Reflection.Types-2.html",
    "title": "Class Types<T1, T2> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types<T1, T2> Represents the types. Inheritance Object Types Types<T1, T2> Inherited Members Types.ToReadOnlyCollection() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class Types<T1, T2> : Types Type Parameters Name Description T1 T2 Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Extension Methods DynamicExtensions.HasProperty(Object, String) See Also Types"
  },
  "api/Platform.Reflection.Types-3.html": {
    "href": "api/Platform.Reflection.Types-3.html",
    "title": "Class Types<T1, T2, T3> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types<T1, T2, T3> Represents the types. Inheritance Object Types Types<T1, T2, T3> Inherited Members Types.ToReadOnlyCollection() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class Types<T1, T2, T3> : Types Type Parameters Name Description T1 T2 T3 Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Extension Methods DynamicExtensions.HasProperty(Object, String) See Also Types"
  },
  "api/Platform.Reflection.Types-4.html": {
    "href": "api/Platform.Reflection.Types-4.html",
    "title": "Class Types<T1, T2, T3, T4> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types<T1, T2, T3, T4> Represents the types. Inheritance Object Types Types<T1, T2, T3, T4> Inherited Members Types.ToReadOnlyCollection() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class Types<T1, T2, T3, T4> : Types Type Parameters Name Description T1 T2 T3 T4 Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Extension Methods DynamicExtensions.HasProperty(Object, String) See Also Types"
  },
  "api/Platform.Reflection.Types-5.html": {
    "href": "api/Platform.Reflection.Types-5.html",
    "title": "Class Types<T1, T2, T3, T4, T5> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types<T1, T2, T3, T4, T5> Represents the types. Inheritance Object Types Types<T1, T2, T3, T4, T5> Inherited Members Types.ToReadOnlyCollection() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class Types<T1, T2, T3, T4, T5> : Types Type Parameters Name Description T1 T2 T3 T4 T5 Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Extension Methods DynamicExtensions.HasProperty(Object, String) See Also Types"
  },
  "api/Platform.Reflection.Types-6.html": {
    "href": "api/Platform.Reflection.Types-6.html",
    "title": "Class Types<T1, T2, T3, T4, T5, T6> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types<T1, T2, T3, T4, T5, T6> Represents the types. Inheritance Object Types Types<T1, T2, T3, T4, T5, T6> Inherited Members Types.ToReadOnlyCollection() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class Types<T1, T2, T3, T4, T5, T6> : Types Type Parameters Name Description T1 T2 T3 T4 T5 T6 Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Extension Methods DynamicExtensions.HasProperty(Object, String) See Also Types"
  },
  "api/Platform.Reflection.Types-7.html": {
    "href": "api/Platform.Reflection.Types-7.html",
    "title": "Class Types<T1, T2, T3, T4, T5, T6, T7> | LinksPlatform's Platform.Reflection Library",
    "keywords": "Class Types<T1, T2, T3, T4, T5, T6, T7> Represents the types. Inheritance Object Types Types<T1, T2, T3, T4, T5, T6, T7> Inherited Members Types.ToReadOnlyCollection() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Reflection Assembly : Platform.Reflection.dll Syntax public class Types<T1, T2, T3, T4, T5, T6, T7> : Types Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 Properties | Improve this Doc View Source Array Gets the array value. Declaration public static Type[] Array { get; } Property Value Type Description Type [] | Improve this Doc View Source Collection Gets the collection value. Declaration public static ReadOnlyCollection<Type> Collection { get; } Property Value Type Description ReadOnlyCollection < Type > Extension Methods DynamicExtensions.HasProperty(Object, String) See Also Types"
  },
  "README.html": {
    "href": "README.html",
    "title": "Reflection | LinksPlatform's Platform.Reflection Library",
    "keywords": "Reflection LinksPlatform's Platform.Reflection Class Library. Namespace: Platform.Reflection Forked from: Konard/LinksPlatform/Platform/Platform.Helpers/Reflection NuGet package: Platform.Reflection Documentation PDF file with code for e-readers. Depend on System.Reflection.Emit System.Reflection.Emit.Lightweight Platform.Collections Dependent libraries Platform.Converters Platform.Singletons"
  }
}